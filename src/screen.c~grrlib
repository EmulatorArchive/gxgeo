#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <gccore.h>
#include <wiiuse/wpad.h>
#include <sys/time.h>
#include "screen.h"
#include "emu.h"
#include "video.h"
#include "conf.h"
#include "GRRLIB/GRRLIB.h"

	Mtx GXmodelView2D;
	static u8 *texturemem;

	bool screen_init()
	{
		VIDEO_Init ();
		texturemem = memalign (32, 352 * 352 * 4);
		DCFlushRange (texturemem, 352 * 352 * 4);
		GRRLIB_InitVideo();
		GRRLIB_Start();
		GRRLIB_FillScreen(0xFF000000);
		GRRLIB_Render();
		return true;
	}
	
	void screen_update()
	{
		int h, w;
		int vwidth 	= buffer.viewport.w;
		int vheight = buffer.viewport.h;
		
		long long int *dst  = (long long int *)texturemem;
		long long int *src1 = (long long int *)( buffer.data + (buffer.viewport.x*buffer.granularity) + (buffer.viewport.y*buffer.pitch) );
		//long long int *src1 = (long long int *)( buffer.data );
		long long int *src2 = src1 + (buffer.width>>2);
		long long int *src3 = src2 + (buffer.width>>2);
		long long int *src4 = src3 + (buffer.width>>2);

		for (h = 0; h < vheight; h += 4) {
			for (w = 0; w < (vwidth >> 2); w++ ) {
				*dst++ = *src1++;
				*dst++ = *src2++;
				*dst++ = *src3++;
				*dst++ = *src4++;
			}
			src1 += (buffer.viewport.x>>1) + buffer.width; // ((buffer.viewport.x * 2) / 4 ) + buffer.width;
			src2 += (buffer.viewport.x>>1) + buffer.width;
			src3 += (buffer.viewport.x>>1) + buffer.width;
			src4 += (buffer.viewport.x>>1) + buffer.width;
		}
		GRRLIB_DrawImg(0, 0, vwidth, vheight, texturemem, GX_TF_RGB565, 0.0f, 1.0f, 1.0f, 0xFF);
		GRRLIB_Render();
	}

	void screen_close(void)	{ printf("Quitting..."); }
